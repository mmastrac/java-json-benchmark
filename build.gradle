plugins {
    id 'com.github.johnrengelman.shadow' version '1.2.3'
    id 'net.ltgt.apt' version '0.6'
}

apply plugin: 'java'

group = 'com.github.fabienrenaud'
version = '1.0.0'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {

    // CLI and misc
    compile group: 'io.airlift', name: 'airline', version: '0.7'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.4'

    // org.json
    compile group: 'org.json', name: 'json', version: '20090211'
    // Jackson
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.7.5'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.7.5'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.7.5'
    compile group: 'com.fasterxml.jackson.module', name: 'jackson-module-afterburner', version: '2.7.5'
    // GSON
    compile group: 'com.google.code.gson', name: 'gson', version: '2.7'
    // JSONP
    compile group: 'javax.json', name: 'javax.json-api', version: '1.0'
    compile group: 'org.glassfish', name: 'javax.json', version: '1.0.4'
    // GENSON
    compile group: 'com.owlike', name: 'genson', version: '1.4'
    // FlexJson
    compile group: 'net.sf.flexjson', name: 'flexjson', version: '3.3'
    // FastJson
    compile group: 'com.alibaba', name: 'fastjson', version: '1.2.12'
    // json-io
    compile group: 'com.cedarsoftware', name: 'json-io', version: '4.5.0'
    // boon
    compile group: 'io.fastjson', name: 'boon', version: '0.33'
    // johnson
    compile group: 'org.apache.johnzon', name: 'johnzon-core', version: '0.9.3-incubating'
    compile group: 'org.apache.johnzon', name: 'johnzon-mapper', version: '0.9.3-incubating'
    // json-smart
    compile group: 'net.minidev', name: 'json-smart', version: '2.2.1'
    // DSL-json
    compile group: 'com.dslplatform', name: 'dsl-json', version: '1.1.1'
    apt group: 'com.dslplatform', name: 'dsl-json-processor', version: '1.2'
    // LoganSquare
    compile group: 'com.bluelinelabs', name: 'logansquare', version: '1.3.7'
    apt group: 'com.bluelinelabs', name: 'logansquare-compiler', version: '1.3.7'
    // nanojson
    compile group: 'com.grack', name: 'nanojson', version: '1.1'

    // Test
    testCompile group: 'junit', name: 'junit', version: '4.12'

    // IMPORANT: Leave JMH at the end!
    // JMH
    compile group: 'org.openjdk.jmh', name: 'jmh-core', version: '1.12'
    apt group: 'org.openjdk.jmh', name: 'jmh-generator-annprocess', version: '1.12'
}

shadowJar {
    baseName = 'benchmarks'
    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
}

test {
    testLogging {
        exceptionFormat = 'full'
        showStandardStreams = true
    }
}

task (depsize) << {
    def size = 0;
    def formatStr = "%,10.2f"
    configurations.default.collect { it.length() / (1024 * 1024) }.each { size += it }

    def out = new StringBuffer()
    out << 'Total dependencies size:'.padRight(45)
    out << "${String.format(formatStr, size)} MiB\n\n"

    configurations
        .default
        .sort { -it.length() }
        .each {
            out << "${it.name}".padRight(45)
            out << "${String.format(formatStr, (it.length() / 1024))} KiB\n"
        }
        println(out)
}

